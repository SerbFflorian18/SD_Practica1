# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chatserver_pb2 as chatserver__pb2


class ChatServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/server.ChatServer/SendMessage',
                request_serializer=chatserver__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=chatserver__pb2.SendMessageResponse.FromString,
                )
        self.ReceiveMessage = channel.unary_unary(
                '/server.ChatServer/ReceiveMessage',
                request_serializer=chatserver__pb2.ReceiveMessageRequest.SerializeToString,
                response_deserializer=chatserver__pb2.ReceiveMessageResponse.FromString,
                )
        self.ConnectToChat = channel.unary_unary(
                '/server.ChatServer/ConnectToChat',
                request_serializer=chatserver__pb2.ConnectToChatRequest.SerializeToString,
                response_deserializer=chatserver__pb2.ConnectToChatResponse.FromString,
                )
        self.SubscribeToGroupChat = channel.unary_unary(
                '/server.ChatServer/SubscribeToGroupChat',
                request_serializer=chatserver__pb2.SubscribeToGroupChatRequest.SerializeToString,
                response_deserializer=chatserver__pb2.SubscribeToGroupChatResponse.FromString,
                )


class ChatServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectToChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToGroupChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chatserver__pb2.SendMessageRequest.FromString,
                    response_serializer=chatserver__pb2.SendMessageResponse.SerializeToString,
            ),
            'ReceiveMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveMessage,
                    request_deserializer=chatserver__pb2.ReceiveMessageRequest.FromString,
                    response_serializer=chatserver__pb2.ReceiveMessageResponse.SerializeToString,
            ),
            'ConnectToChat': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectToChat,
                    request_deserializer=chatserver__pb2.ConnectToChatRequest.FromString,
                    response_serializer=chatserver__pb2.ConnectToChatResponse.SerializeToString,
            ),
            'SubscribeToGroupChat': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeToGroupChat,
                    request_deserializer=chatserver__pb2.SubscribeToGroupChatRequest.FromString,
                    response_serializer=chatserver__pb2.SubscribeToGroupChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server.ChatServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.ChatServer/SendMessage',
            chatserver__pb2.SendMessageRequest.SerializeToString,
            chatserver__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.ChatServer/ReceiveMessage',
            chatserver__pb2.ReceiveMessageRequest.SerializeToString,
            chatserver__pb2.ReceiveMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectToChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.ChatServer/ConnectToChat',
            chatserver__pb2.ConnectToChatRequest.SerializeToString,
            chatserver__pb2.ConnectToChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.ChatServer/SubscribeToGroupChat',
            chatserver__pb2.SubscribeToGroupChatRequest.SerializeToString,
            chatserver__pb2.SubscribeToGroupChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
